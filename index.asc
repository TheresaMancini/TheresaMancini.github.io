:source-highlighter: pygments
:stem:

// comenta

= Atividades da Disciplina DCA0445  =
 Aluna: Ana Theresa Fernandes de Oliveira Mancini  

== Orientação para execução dos códigos == 

Para compilar e excutar os códigos aqui apresentado é necessário salvar os arquivos .cpp juntamente com o arquivo link:https://TheresaMancini.github.io/codigos/Makefile[Makefile] em um diretório e execute a seguinte seqüência de comandos:
....
$ make <Nome_do_arquivo_cpp>
$ ./<Nome_do_arquivo_cpp>
....

== Exercício 1 - Regions == 

Utilizando o programa pixels.cpp como referência, foi implementado o programa link:https://TheresaMancini.github.io/codigos/regions.cpp[regions.cpp] . Esse programa solicita ao usuário as coordenadas de dois pontos P1 e P2 localizados dentro dos limites do tamanho da imagem. A partir desses pontos, o programa exibide a imagem com a região definida pelo retângulo de vértices opostos definidos pelos pontos P1 e P2 em negativo.


[[exa_regions, Regions]]
.regions.cpp
[source,cpp]
----
include::codigos/regions.cpp[]
---- 
// o que tiver entre os 4 tracinhos são codigo fonte, pode copiar ou colar o código fonte ou botar a referência
[.float-group]
--
[[fig_biel, Original]]
[.left]
.Original
image::imagens/biel.png[Original, title="Imagem Original"]
[[fig_biel_depois, Saída Regions]]
[.left]
.Saida do programa regions
image::imagens/biel_regions.png[Saida do programa regions, title="Saída com Pontos (70,80) e (200,200)"]
--
== Exercício 2 -Troca Regiões == 

Utilizando o programa pixels.cpp como referência, foi implementado o programa link:https://TheresaMancini.github.io/codigos/trocaregioes.cpp[trocaregioes.cpp] . Esse programa troca os quadrantes 1-3 e 2-4 da imagem. Para isso é utilizada a imagem Rect, para fazer o corte de cada quadrante da imagem original, cada um desses cortes é então copiado em uma nova imagem, que será a imagem com os quadrantes trocadados.

[[exa_trocaregions, Troca Regioes]]
.trocaregioes.cpp
[source,cpp]
----
include::codigos/trocaregioes.cpp[]
---- 

[[fig_biel_depoistroca, Saída Troca Regioes]]
//[.text-center]
.Saida do programa trocaregioes
image::imagens/trocada.png[Saida do programa regions, title="Saída Troca Reigões usando a imagem <<fig_biel>>"]

== Exercício 3 - Labeling ==

Utilizando o programa labeling.cpp como referência, foi feito um aprimoramento no link:https://TheresaMancini.github.io/codigos/labeling.cpp[labeling.cpp] algorítimo de forma que fosse possível fazer a contagem do número de objetos que tinham buracos. Não sendo possível assumir se os objetos que tocavam as bordas teriam ou não buracos, eles não foram considerados na contagem, para isso foi realizado a operação de floodFill neles, de forma que se tornassem parte do fundo. Para realizar a contagem de objetos com buraco foi verificado se o pixel encontrado era preto (o que poderia identificar um buraco) e se o pixel anterior a ele tinha um tom de cinza com valor maior que a variável nbolhas (que no caso faz referencia ao numero de buracos) de forma que caso isso fosse verdadeiro teremos encontrado uma bolha que ainda não foi contabilizada. Para cada buraco encontrado aplicasse o floodFill na sua bolha (objeto) correspondente.  

Observação: Para o caso de mais de 255 objetos, é necessário que quando a variável nobjetos chegue em 255 seja zerada, salvando o seu valor atual em uma variável auxiliar. No final o valor total de objetos será a soma da variável auxiliar com a variável nobjects. 

[[exa_labeling, Labeling]]
.labeling.cpp
[source,cpp]
----
include::codigos/labeling.cpp[]
---- 

[.float-group]
--
[[fig_bolhas, Original_Bolhas]]
[.left]
.Original_Bolhas
image::imagens/bolhas.png[Original_Bolhas, title="Imagem Original"]
[[fig_bolhas_depois, Saída labelling]]
[.left]
.Saida do programa Labelling
image::imagens/labeling.png[Saida do programa labeling, title="Imagem de saída do programa labeling"]
[[fig_bolhas_terminal, Saída Terminal labeling]]
[.left]
.Saida do programa Labeling Terminal
image::imagens/nburacos.png[Saida do programa Labeling Terminal, title="Imagem de saída do programa labeling no terminal"]
--

== Exercício 4 - Equalize ==

Utilizando o programa histogram.cpp como referência, foi implementado o programa equalize.cpp que equaliza o histograma da imagem capturada antes de exibir a imagem. A equalização é feita usando a função equalizeHist do OpenCV. Com a equalização ocorre a redistribuição dos tons de cinza, que tornasse mais uniforme, como é possível ver no histograma da imagem equalizada. 

[[exa_equalize, equalize]]
.equalize.cpp
[source,cpp]
----
include::codigos/equalize.cpp[]
---- 

[.float-group]
--
[[fig_equalizes, Original_Equalize]]
[.left]
.Original_Equalize
image::imagens/semequalizer.png[Original_Equalize, title="Imagem Original"]
[[fig_equalizecom, Saída equalize]]
[.left]
.Saida do programa equalize
image::imagens/comequalizer.png[Saida do programa equalize, title="Imagem equalizada"]
--

== Exercício 5 - Detecção de Movimento ==

Utilizando o programa histogram.cpp como referência, foi implementado o programa motiondetector.cpp que calcula continuamento o histograma da imagem capturada, no caso apenas a componente vermelha, e compara-o com o ultimo histograma da componente calculado. A forma utilizada para verificar a mudança entre os histogramas foi a correlação, usando a função compareHist com o parametro CV_COMP_CORREL. Foi estabelecido que quando a correlação entre os histogramas fosse menor que 0.998 seria considerado que ocorreu movimento.  


[[exa_motion, motion]]
.motion.cpp
[source,cpp]
----
include::codigos/motiondetector.cpp[]
---- 

== Exercício 6 - Filtro Espacial I ==

Utilizando o programa filtroespacial.cpp como referência, foi implementado o programa laplgauss.cpp. O programa acrescentar mais uma funcionalidade ao exemplo fornecido, permitindo que seja calculado o laplaciano do gaussiano das imagens capturadas pressionando a letra d. Comparando as imagens resultantes da aplicação do filtro laplaciano e do laplaciano do gaussiano é possível perceber que a aplicação do segundo filtro torna os contornos/bordas muito mais visiveis. 

[[exa_lapgauss, laplgauss]]
.laplgauss.cpp
[source,cpp]
----
include::codigos/laplgauss.cpp[]
---- 

[.float-group]
--
[[fig_solap, solap]]
[.left]
.solap
image::imagens/filtroespacial_solaplace.png[solap, title="Imagem apenas com filtro laplaciano"]
[[fig_lapgauss, Saída lapgauss]]
[.left]
.Saida do programa lapgauss
image::imagens/filtroespacial.png[Saida do programa lapgauss, title="Imagem com filtro laplaciano do gaussiano"]
--


